[{
        "id": 1142,
        "date": "2019-09-24T11:19:10",
        "date_gmt": "2019-09-24T11:19:10",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=1142"
        },
        "modified": "2019-10-10T07:09:25",
        "modified_gmt": "2019-10-10T07:09:25",
        "slug": "gutenberg-sample-01",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/gutenberg-sample-01/",
        "title": {
            "rendered": "LOCAL DATA SET Gutenberg Sample 01"
        },
        "content": {
            "rendered": "\n<p><a href=\"https://wpjs.co.uk/wpb/wp-json/udemy/v1/latest-posts/25\">https://wpjs.co.uk/wpb/wp-json/udemy/v1/latest-posts/25</a></p>\n\n\n\n<p><a href=\"https://github.com/WordPress/WordPress/tree/master/wp-includes/css/dist/block-library\">https://github.com/WordPress/WordPress/tree/master/wp-includes/css/dist/block-library</a></p>\n\n\n\n<p>Outputting Gutenberg blocks from  https://wpjs.co.uk/wpb/wp-json/wp/v2/posts?categories=25</p>\n\n\n\n<figure class=\"wp-block-embed-youtube wp-block-embed is-type-video is-provider-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio\"><div class=\"wp-block-embed__wrapper\">\n<iframe title=\"Wordpress JSON REST API Tutorial for beginners(#14) Register Methods Types in Custom Rest Route WP\" width=\"640\" height=\"360\" src=\"https://www.youtube.com/embed/videoseries?list=PLT9miexWCpPU3TtDIVxA765dh2MaJY5X3\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div></figure>\n\n\n<div class=\"wp-block-calendar aligncenter\"><table id=\"wp-calendar\">\n\t<caption>January 2020</caption>\n\t<thead>\n\t<tr>\n\t\t<th scope=\"col\" title=\"Monday\">M</th>\n\t\t<th scope=\"col\" title=\"Tuesday\">T</th>\n\t\t<th scope=\"col\" title=\"Wednesday\">W</th>\n\t\t<th scope=\"col\" title=\"Thursday\">T</th>\n\t\t<th scope=\"col\" title=\"Friday\">F</th>\n\t\t<th scope=\"col\" title=\"Saturday\">S</th>\n\t\t<th scope=\"col\" title=\"Sunday\">S</th>\n\t</tr>\n\t</thead>\n\n\t<tfoot>\n\t<tr>\n\t\t<td colspan=\"3\" id=\"prev\"><a href=\"https://wpjs.co.uk/wpb/2019/12/\">&laquo; Dec</a></td>\n\t\t<td class=\"pad\">&nbsp;</td>\n\t\t<td colspan=\"3\" id=\"next\" class=\"pad\">&nbsp;</td>\n\t</tr>\n\t</tfoot>\n\n\t<tbody>\n\t<tr>\n\t\t<td colspan=\"2\" class=\"pad\">&nbsp;</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td>\n\t</tr>\n\t<tr>\n\t\t<td>6</td><td id=\"today\">7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td>\n\t</tr>\n\t<tr>\n\t\t<td>13</td><td>14</td><td>15</td><td>16</td><td>17</td><td>18</td><td>19</td>\n\t</tr>\n\t<tr>\n\t\t<td>20</td><td>21</td><td>22</td><td>23</td><td>24</td><td>25</td><td>26</td>\n\t</tr>\n\t<tr>\n\t\t<td>27</td><td>28</td><td>29</td><td>30</td><td>31</td>\n\t\t<td class=\"pad\" colspan=\"2\">&nbsp;</td>\n\t</tr>\n\t</tbody>\n\t</table></div>\n\n<ul class=\"wp-block-categories wp-block-categories-list\">\t<li class=\"cat-item cat-item-7\"><a href=\"https://wpjs.co.uk/wpb/category/cors/\">CORS</a>\n</li>\n\t<li class=\"cat-item cat-item-6\"><a href=\"https://wpjs.co.uk/wpb/category/decoupled-wp/\">DECOUPLED WP</a>\n</li>\n\t<li class=\"cat-item cat-item-26\"><a href=\"https://wpjs.co.uk/wpb/category/frontpage/\">frontpage</a>\n</li>\n\t<li class=\"cat-item cat-item-8\"><a href=\"https://wpjs.co.uk/wpb/category/references/\">REFERENCES</a>\n</li>\n\t<li class=\"cat-item cat-item-5\"><a href=\"https://wpjs.co.uk/wpb/category/rest-api/\">REST-API</a>\n</li>\n\t<li class=\"cat-item cat-item-2\"><a href=\"https://wpjs.co.uk/wpb/category/site-set-up/\">SITE SET UP</a>\n</li>\n\t<li class=\"cat-item cat-item-24\"><a href=\"https://wpjs.co.uk/wpb/category/vienna/\">VIENNA</a>\n</li>\n\t<li class=\"cat-item cat-item-25\"><a href=\"https://wpjs.co.uk/wpb/category/wpbtn/\">WPBTN</a>\n</li>\n</ul>\n\n<p class=\"wp-block-tag-cloud\"><a href=\"https://wpjs.co.uk/wpb/tag/tag1/\" class=\"tag-cloud-link tag-link-17 tag-link-position-1\" style=\"font-size: 22pt;\" aria-label=\"tag1 (4 items)\">tag1</a>\n<a href=\"https://wpjs.co.uk/wpb/tag/tag2/\" class=\"tag-cloud-link tag-link-18 tag-link-position-2\" style=\"font-size: 22pt;\" aria-label=\"tag2 (4 items)\">tag2</a>\n<a href=\"https://wpjs.co.uk/wpb/tag/tag3/\" class=\"tag-cloud-link tag-link-19 tag-link-position-3\" style=\"font-size: 14.3pt;\" aria-label=\"tag3 (2 items)\">tag3</a>\n<a href=\"https://wpjs.co.uk/wpb/tag/tag4/\" class=\"tag-cloud-link tag-link-20 tag-link-position-4\" style=\"font-size: 8pt;\" aria-label=\"tag4 (1 item)\">tag4</a>\n<a href=\"https://wpjs.co.uk/wpb/tag/tag5/\" class=\"tag-cloud-link tag-link-21 tag-link-position-5\" style=\"font-size: 18.5pt;\" aria-label=\"tag5 (3 items)\">tag5</a>\n<a href=\"https://wpjs.co.uk/wpb/tag/tag6/\" class=\"tag-cloud-link tag-link-22 tag-link-position-6\" style=\"font-size: 8pt;\" aria-label=\"tag6 (1 item)\">tag6</a>\n<a href=\"https://wpjs.co.uk/wpb/tag/tag7/\" class=\"tag-cloud-link tag-link-23 tag-link-position-7\" style=\"font-size: 14.3pt;\" aria-label=\"tag7 (2 items)\">tag7</a></p>",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>https://wpjs.co.uk/wpb/wp-json/udemy/v1/latest-posts/25 https://github.com/WordPress/WordPress/tree/master/wp-includes/css/dist/block-library Outputting Gutenberg blocks from https://wpjs.co.uk/wpb/wp-json/wp/v2/posts?categories=25</p>\n",
            "protected": false
        },
        "author": 14,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            25
        ],
        "tags": [],
        "authorName": "Craig Admin",
        "acf": {
            "source": "We have added ACF support using ACF TO REST plugin"
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1142"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/14"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=1142"
            }],
            "version-history": [{
                "count": 15,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1142/revisions"
            }],
            "predecessor-version": [{
                "id": 1180,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1142/revisions/1180"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=1142"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=1142"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=1142"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    },
    {
        "id": 1060,
        "date": "2019-06-16T10:52:21",
        "date_gmt": "2019-06-16T10:52:21",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=1060"
        },
        "modified": "2020-01-02T20:19:00",
        "modified_gmt": "2020-01-02T20:19:00",
        "slug": "blog-web-component",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/blog-web-component/",
        "title": {
            "rendered": "Session vs Local Storage"
        },
        "content": {
            "rendered": "\n<p>We store the JWT in local rather than session storage because if the user opens a new window or a new tab the token is not available.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://wpjs.co.uk/wpb/wp-content/uploads/session-storage2.png\" alt=\"\" class=\"wp-image-1070\" srcset=\"https://wpjs.co.uk/wpb/wp-content/uploads/session-storage2.png 714w, https://wpjs.co.uk/wpb/wp-content/uploads/session-storage2-300x123.png 300w\" sizes=\"(max-width: 714px) 100vw, 714px\" /></figure>\n\n\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage</a></p>\n\n\n\n<p>By storing the creation date of the JWT in our database, we can add an expiration policy, forcing the user to login again on a subsequent visit.</p>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This Blog Web Component lists all posts for a selected category. The array of posts is held in a JavaScript Array in browser memory so will seem to load posts instantly. Anything under 100ms is deemed &#8216;instant&#8217; by the brain. Provided the user stays on this page, all posts will be accessible even if OFFLINE. [&hellip;]</p>\n",
            "protected": false
        },
        "author": 14,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            25
        ],
        "tags": [],
        "authorName": "Craig Admin",
        "acf": {
            "source": ""
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1060"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/14"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=1060"
            }],
            "version-history": [{
                "count": 9,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1060/revisions"
            }],
            "predecessor-version": [{
                "id": 1245,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1060/revisions/1245"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=1060"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=1060"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=1060"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    },
    {
        "id": 1054,
        "date": "2019-06-15T12:48:53",
        "date_gmt": "2019-06-15T12:48:53",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=1054"
        },
        "modified": "2020-01-07T05:10:00",
        "modified_gmt": "2020-01-07T05:10:00",
        "slug": "what-makes-an-api-restful",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/what-makes-an-api-restful/",
        "title": {
            "rendered": "What makes an API RESTful?"
        },
        "content": {
            "rendered": "\n<p><a href=\"https://blog.readme.io/the-history-of-rest-apis/\">https://blog.readme.io/the-history-of-rest-apis/</a></p>\n\n\n\n<p><strong>The Birth of REST: Roy Fielding&#8217;s Dissertation</strong></p>\n\n\n\n<p>In 2000, Roy Fielding and his colleagues had one objective: create a standard so that any server could talk to any other server in the world. Here&#8217;s what he came up with in his&nbsp;<a href=\"http://www.ics.uci.edu/~fielding/pubs/dissertation/evaluation.htm\">doctoral dissertation</a>:</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>I had comments from well over 500 developers, many of whom were distinguished engineers with decades of experience, and I had to explain everything from the most abstract notions of Web interaction to the finest details of HTTP syntax.&nbsp;<strong>That process honed my model down to a core set of principles, properties, and constraints that are now called REST.</strong></p></blockquote>\n\n\n<h2>What makes an API RESTful?</h2>\n<p><b>So what do these mean?</b></p>\n<ul>\n<li><strong>Uniform interface: </strong>This means we use HTTP verbs (GET, PUT, POST, DELETE). We use URIs as our resources. And we get an HTTP response with a status and a body.</li>\n<li><strong>Stateless.</strong> This means each request is self-descriptive, and has enough context for the server to process that message.</li>\n<li><strong>Client-server.:</strong>There has to be clear boundaries between roles of the two two systems. One server, operationally, <em>has</em> to function as the server that is being called, and the other <em>has</em> to function as the one making the requests.</li>\n<li><strong>Cacheable: </strong>Unless denoted, a client can cache any representation. This is possible thanks to the statelessness—every representation is self-descriptive.</li>\n<li><b>Layered System: </b>A Layered System employs several independent layers to develop and extend the interface. As layers cannot see into each other, new requests and middleware can be inserted that will not have an impact on the initial commands and the client-server functioning.  Thus if the bits in the middle change, the client still only needs the original URL to fulfil its request.</li>\n<li><b>Code on demand: </b>This is optional and just means client can change its code as it wishes and is independent of the server logic.</li>\n</ul>\n<p><strong>IN ESSENCE</strong></p>\n<p>If we are using HTTP and URLs then our APIs are essentially RESTful in spirit if not by letter.</p>\n<p>As far as our clients are concerned, they just need to know the URL and parameters to get data in a known format and know that whatever changes take place in the middle or at the server, they need not change their code.</p>",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>https://blog.readme.io/the-history-of-rest-apis/ The Birth of REST: Roy Fielding&#8217;s Dissertation In 2000, Roy Fielding and his colleagues had one objective: create a standard so that any server could talk to any other server in the world. Here&#8217;s what he came up with in his&nbsp;doctoral dissertation: I had comments from well over 500 developers, many of whom were [&hellip;]</p>\n",
            "protected": false
        },
        "author": 14,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            25
        ],
        "tags": [],
        "authorName": "Craig Admin",
        "acf": {
            "source": ""
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1054"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/14"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=1054"
            }],
            "version-history": [{
                "count": 3,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1054/revisions"
            }],
            "predecessor-version": [{
                "id": 1069,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1054/revisions/1069"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=1054"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=1054"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=1054"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    },
    {
        "id": 1052,
        "date": "2019-06-15T12:48:09",
        "date_gmt": "2019-06-15T12:48:09",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=1052"
        },
        "modified": "2019-08-12T13:31:06",
        "modified_gmt": "2019-08-12T13:31:06",
        "slug": "what-is-an-endpoint",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/what-is-an-endpoint/",
        "title": {
            "rendered": "What is an ENDPOINT?"
        },
        "content": {
            "rendered": "\n<p>An ENDPOINT is an API that gives us a resource based on a URL.</p>\n\n\n\n<p>There are a number of HTTP methods (verbs) like GET, POST, PUT, DELETE and so on.</p>\n\n\n\n<p></p>\n\n\n\n<p>Strictly speaking an ENDPOINT is:</p>\n\n\n\n<p>HTTP_VERB + URL = ENDPOINT</p>\n\n\n\n<p>In the WP built in REST API, we have one URL that can be used in two ways &#8211; GET data or POST data:</p>\n\n\n\n<p><a href=\"https://wpjs.co.uk/wpb/wp-json/wp/v2/posts\">https://wpjs.co.uk/wpb/wp-json/wp/v2/posts</a></p>\n\n\n\n<p>Thus POST + the URL above = ENDPOINT 1</p>\n\n\n\n<p>GET + the URL above = ENDPOINT 2</p>\n\n\n\n<p>We can use the term ENDPOINT /RESOURCE/API loosely although strictly speaking the choice might be incorrect.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>An ENDPOINT is an API that gives us a resource based on a URL. There are a number of HTTP methods (verbs) like GET, POST, PUT, DELETE and so on. Strictly speaking an ENDPOINT is: HTTP_VERB + URL = ENDPOINT In the WP built in REST API, we have one URL that can be used [&hellip;]</p>\n",
            "protected": false
        },
        "author": 14,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            25
        ],
        "tags": [],
        "authorName": "Craig Admin",
        "acf": {
            "source": ""
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1052"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/14"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=1052"
            }],
            "version-history": [{
                "count": 4,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1052/revisions"
            }],
            "predecessor-version": [{
                "id": 1068,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/1052/revisions/1068"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=1052"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=1052"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=1052"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    },
    {
        "id": 955,
        "date": "2019-06-03T05:13:48",
        "date_gmt": "2019-06-03T05:13:48",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=955"
        },
        "modified": "2019-08-12T13:31:29",
        "modified_gmt": "2019-08-12T13:31:29",
        "slug": "session-vs-local-storage",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/session-vs-local-storage/",
        "title": {
            "rendered": "Session vs Local Storage"
        },
        "content": {
            "rendered": "\n<p>We store the JWT in local rather than session storage because if the user opens a new window or a new tab the token is not available.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://wpjs.co.uk/wpb/wp-content/uploads/session-storage2.png\" alt=\"\" class=\"wp-image-1070\" srcset=\"https://wpjs.co.uk/wpb/wp-content/uploads/session-storage2.png 714w, https://wpjs.co.uk/wpb/wp-content/uploads/session-storage2-300x123.png 300w\" sizes=\"(max-width: 714px) 100vw, 714px\" /></figure>\n\n\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\">https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage</a></p>\n\n\n\n<p>By storing the creation date of the JWT in our database, we can add an expiration policy, forcing the user to login again on a subsequent visit.</p>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We store the JWT in local rather than session storage because if the user opens a new window or a new tab the token is not available. https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage By storing the creation date of the JWT in our database, we can add an expiration policy, forcing the user to login again on a subsequent visit.</p>\n",
            "protected": false
        },
        "author": 14,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            6,
            25
        ],
        "tags": [],
        "authorName": "Craig Admin",
        "acf": {
            "source": ""
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/955"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/14"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=955"
            }],
            "version-history": [{
                "count": 2,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/955/revisions"
            }],
            "predecessor-version": [{
                "id": 1071,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/955/revisions/1071"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=955"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=955"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=955"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    },
    {
        "id": 852,
        "date": "2019-06-01T10:57:22",
        "date_gmt": "2019-06-01T10:57:22",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=852"
        },
        "modified": "2019-08-12T13:34:11",
        "modified_gmt": "2019-08-12T13:34:11",
        "slug": "creating-endpoints",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/creating-endpoints/",
        "title": {
            "rendered": "CREATING ENDPOINTS"
        },
        "content": {
            "rendered": "<p>ENDPOINT = HTTP VERB (GET, POST etc) and a URL</p>\n\n\n<p>GET https://wpjs.co.uk/wpb/jsonserver02/ is an endpoint as\nit has a HTTP verb &#8211; GET &#8211; and an URL</p>\n\n\n\n<p>Two endpoints can have the same URL if they have different HTTP verbs. GET URL and POST URL.</p>\n\n\n\n<p>In the built in REST API, https://wpjs.co.uk/wpb/wp-json/wp/v2/posts can be used to GET posts or to POST a post to it. Same URL but the HTTP verb is different.</p>\n\n\n\n<p>OUR CUSTOM ENDPOINTS:</p>\n\n\n\n<p>We create endpoints by making a WP page,<strong> jsonservo2</strong> for example, in the ADMIN site but with no content and then create a file <strong>page-jsonserv02.php </strong>and place this in the root of our WP site.</p>\n\n\n\n<p>The url <strong>https://wpjs.co.uk/wpb/jsonserver02 </strong> will then output the contents of this page as we would expect in a normal WP site. (<strong>RED</strong> is the wp base site url, and <strong>jsonserver02 </strong>a page on the site).</p>\n\n\n\n<p>However, we can post this data back when we get a GET AJAX request, either as HTML or JSON.</p>\n\n\n\n<p>In a way, our decoupled site is becoming the end browser for the page. That is how we can get the posts and html data displayed on our site on the INDEX page for example.</p>\n\n\n\n<p>HEADLESS v DECOUPLED</p>\n\n\n\n<p>These two terms are used to describe a separate WP site but there can be a subtle difference.</p>\n\n\n\n<p>A <strong>HEADLESS</strong> site receives preformatted output that is then injected into a &#8216;slot&#8217; on the page like a div area for example. Our &#8216;Card 01&#8217; on the index page and &#8216;Card 03&#8217; are examples of this. Using<a href=\"https://wpjs.co.uk/wpb/wp-query/\"> WP_Query</a> and other php code, we can create any type of page, formatted or not, and the inject it into a slot on the STATIC site.</p>\n\n\n\n<p>A <strong>DECOUPLED</strong> site receives raw data, usually JSON, and then\ncreates the display content using the data. Our ACF example or jsonserver01 and\njsonserver02 are examples of this.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>ENDPOINT = HTTP VERB (GET, POST etc) and a URL GET https://wpjs.co.uk/wpb/jsonserver02/ is an endpoint as it has a HTTP verb &#8211; GET &#8211; and an URL Two endpoints can have the same URL if they have different HTTP verbs. GET URL and POST URL. In the built in REST API, https://wpjs.co.uk/wpb/wp-json/wp/v2/posts can be used [&hellip;]</p>\n",
            "protected": false
        },
        "author": 14,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            5,
            25
        ],
        "tags": [],
        "authorName": "Craig Admin",
        "acf": {
            "source": null
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/852"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/14"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=852"
            }],
            "version-history": [{
                "count": 6,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/852/revisions"
            }],
            "predecessor-version": [{
                "id": 951,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/852/revisions/951"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=852"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=852"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=852"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    },
    {
        "id": 608,
        "date": "2019-05-22T08:52:38",
        "date_gmt": "2019-05-22T08:52:38",
        "guid": {
            "rendered": "https://wpjs.co.uk/wpb/?p=608"
        },
        "modified": "2019-08-12T13:33:00",
        "modified_gmt": "2019-08-12T13:33:00",
        "slug": "json-web-tokens",
        "status": "publish",
        "type": "post",
        "link": "https://wpjs.co.uk/wpb/json-web-tokens/",
        "title": {
            "rendered": "03-3 THE JWT PAGE"
        },
        "content": {
            "rendered": "<p>To make for a better user experience, we do not want users to have to login every time they want to connect to resources that need authentication.</p>\n\n\n<p>REST is a decoupled architecture by definition so the server has no prior knowledge of the client.</p>\n\n\n\n<p>In essence, we need to send some sort of token or API key with each request. We can do this in /resource/?id=xxx&amp;KEY=yyy where we make our own key. Or we could post the key.</p>\n\n\n\n<p>HTTPS encrypts but the querystring is visible in server logs. That could be a security breach.</p>\n\n\n\n<p>We are going to use JWT by sending the token in the header section of the AJAX request.</p>\n\n\n\n<p>This will be more for user experience rather than the highest level of security.</p>\n\n\n\n<h2>JSON Web Tokens (JWT)</h2>\n\n\n\n<h4>It is important to note that JWT are <em>encoding</em> not encryption.</h4>\n\n\n\n<h4>Encoding is for maintaining data usability and can be reversed by employing the same algorithm that encoded the content, i.e. no key is used. Encryption is for maintaining data confidentiality and requires the use of a key (kept secret) in order to return to plain text.</h4>\n\n\n\n<p>The purpose of JWTs are to verify the integrity of the token, its signature.</p>\n\n\n\n<p>Base64 encdoing is used and this is a free tool on the web &#8211; https://www.base64decode.org/.</p>\n\n\n\n<p>\n\nThe term Base64 refers to a specific MIME content transfer encoding. It is also used as a generic term for any similar encoding scheme that encodes&nbsp;<strong>binary data</strong>&nbsp;by treating it numerically and translating it into a base 64 representation.\n\n</p>\n\n\n\n<p>It contains three parts:</p>\n\n\n\n<ol><li>The HEADER details the hashing algorithm.</li><li>The PAYLOAD contains the data.</li><li>The SIGNATURE has a hashing of SECRET KEY, PAYLOAD and HEADER. For a given SECRET KEY, if the payload is tampered with, then the signature will be invalid.</li><li></li></ol>\n\n\n\n<ul><li>Convert HEADER to JSON.</li><li>Base64 encode it.</li><li>Convert PAYLOAD to JSON.</li><li>Base64 encode it.</li><li>Concatenate the two with a &#8220;.&#8221;</li><li>Perform a HASH on that with the SECRET KEY and HASH ALGORITHM to give raw signature.</li><li>Base64 encode this raw signature to give JWT</li></ul>\n\n\n\n<p><a href=\"https://wpjam.netlify.com/jwt-encode.html\">https://wpjam.netlify.com/jwt-encode.html</a></p>\n\n\n\n<a href=\"https://wpjs.co.uk/wpb/jwt-php-encode-decode/\" target=\"_new\" rel=\"noopener noreferrer\">https://wpjs.co.uk/wpb/jwt-php-encode-decode/</a>\n\n\n\n<p>In the example above,<strong> eyJpZCI6IjEyMzQ1Njc4OTAiLCJuYW1lIjoiQ3JhaWcgV2VzdCIsImFkbWluIjp0cnVlfQ&nbsp;</strong>is the payload. Using the base64 tool link above we can decode it to get:</p>\n\n\n\n<p>{&#8220;id&#8221;:&#8221;1234567890&#8243;,&#8221;name&#8221;:&#8221;Craig West&#8221;,&#8221;admin&#8221;:true}</p>\n\n\n\n<p>However, if it was tampered with and the id was changed in any way, then the JWT verification would say INVALID SIGNATURE. only the string above would work.</p>\n\n\n\n<p>We can see this by going to<strong> jwt.io</strong> and altering the payload.</p>\n\n\n\n<p>If we change the ID to 555, the payload becomes: <strong>eyJpZCI6IjU1NSIsIm5hbWUiOiJDcmFpZyBXZXN0IiwiYWRtaW4iOnRydWV9.</strong></p>\n\n\n\n<p>If we use this then the token is unverified.</p>\n\n\n\n<p>It is like a cheque. An algorithm takes the payee, amount, secret key etc and creates a JWT.</p>\n\n\n\n<p>The signature part corresponds to the header and payload initially supplied. Any changes, even one character will mean that the signature does not correspond to the payload and header.</p>\n\n\n\n<p>So JWT is not about encryption &#8211; https does that. It is about verifying the integrity of the payload.</p>\n\n\n\n<p>In our app, we are using tokens or API keys to prevent the user from having to log in each time as the REST API has no bond between client and server.</p>\n\n\n\n<p>We could create our own tokens but JWT is one of the industry standard methods.</p>\n\n\n\n<p>When the server receives a JWT, it can get the ID either by decoding or by checking against the 01_tblJWT table that has ID and JWT stored.</p>\n\n\n\n<p>For our app, we are checking that the JWT supplied is registered in our database and if we need the ID of the user we can get it.</p>\n\n\n\n<p>If someone supplies a JWT that is not in our database then it is like a login that has the wrong credentials.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>To make for a better user experience, we do not want users to have to login every time they want to connect to resources that need authentication. REST is a decoupled architecture by definition so the server has no prior knowledge of the client. In essence, we need to send some sort of token or [&hellip;]</p>\n",
            "protected": false
        },
        "author": 11,
        "featured_media": 0,
        "comment_status": "closed",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            6,
            25
        ],
        "tags": [],
        "authorName": "Udemy Admin",
        "acf": {
            "source": null
        },
        "_links": {
            "self": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/608"
            }],
            "collection": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts"
            }],
            "about": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/types/post"
            }],
            "author": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/users/11"
            }],
            "replies": [{
                "embeddable": true,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/comments?post=608"
            }],
            "version-history": [{
                "count": 27,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/608/revisions"
            }],
            "predecessor-version": [{
                "id": 965,
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/posts/608/revisions/965"
            }],
            "wp:attachment": [{
                "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/media?parent=608"
            }],
            "wp:term": [{
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/categories?post=608"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://wpjs.co.uk/wpb/wp-json/wp/v2/tags?post=608"
                }
            ],
            "curies": [{
                "name": "wp",
                "href": "https://api.w.org/{rel}",
                "templated": true
            }]
        }
    }
]